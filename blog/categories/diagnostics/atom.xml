<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Diagnostics | FocusIt - Make IT happens]]></title>
  <link href="http://d0k1.github.io/focusit/blog/categories/diagnostics/atom.xml" rel="self"/>
  <link href="http://d0k1.github.io/focusit/"/>
  <updated>2017-01-20T23:59:44+05:00</updated>
  <id>http://d0k1.github.io/focusit/</id>
  <author>
    <name><![CDATA[Denis Kirpichenkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jstat]]></title>
    <link href="http://d0k1.github.io/focusit/blog/2017/01/06/jstat/"/>
    <updated>2017-01-06T15:25:53+05:00</updated>
    <id>http://d0k1.github.io/focusit/blog/2017/01/06/jstat</id>
    <content type="html"><![CDATA[<p>Sometime ago I&rsquo;ve realized that JVM has two major things, that affects JVM performance the most.
It is Jist-In-Time compilation and, of course, Garbage Collection.
I believe that <code>jstat</code> is a great tool that show what&rsquo;s JIT/GC doing right now, and some statistics about JIT/GC activity.</p>

<!-- more -->


<p>Let&rsquo;s go to the bussiness.</p>

<p>To start jstat run</p>

<p><code>
jstat operation option PID interval count
</code></p>

<ul>
<li>operation is a jstat&rsquo;s &lsquo;mode&rsquo;. It can monitor compiler, gc, classes. To get full list of supported operations run <code>jstat -options</code></li>
<li>option can beutify in some sense jstat output. <code>jstat -t</code> will print timestamp for every line. Timestamp is a time in seconds elapsed from JVM&rsquo;s start. <code>jstat -h 3</code> will print header every 3 lines of jstat&rsquo;s output.</li>
<li>PID is a JVM&rsquo;s process id. Actually, as PID you can provide a vmid that is running on remote server. Example <code>jstat -gccause 123@remote-server.rsi</code></li>
<li>interval is a time between jstat measurements. It can be in ms or s. Example <code>jstat -compiler 4795 1s</code></li>
<li>count is a number of jstat measurements</li>
</ul>


<p>As for me I prefer to use -gccause -compiler modes when using jstat.</p>

<pre><code>$ jstat -compiler -t -h 3 4795 1s                                                                                                                                             130 ↵
Timestamp       Compiled Failed Invalid   Time   FailedType FailedMethod
        33819.6     1270      1       0     4.61          1 sun/misc/URLClassPath$JarLoader getResource
        33820.6     1270      1       0     4.61          1 sun/misc/URLClassPath$JarLoader getResource
        33821.6     1270      1       0     4.61          1 sun/misc/URLClassPath$JarLoader getResource

$ jstat -gccause -t -h 3 4795 1s                                                                                                                                              130 ↵
Timestamp         S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC                 
        33984.8  78.01   0.00  11.38   0.10  97.16  95.01      2    0.099     0    0.000    0.099 Allocation Failure   No GC               
        33985.9  78.01   0.00  11.38   0.10  97.16  95.01      2    0.099     0    0.000    0.099 Allocation Failure   No GC               
        33986.9  78.01   0.00  11.38   0.10  97.16  95.01      2    0.099     0    0.000    0.099 Allocation Failure   No GC               
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jcmd]]></title>
    <link href="http://d0k1.github.io/focusit/blog/2017/01/04/jcmd/"/>
    <updated>2017-01-04T01:32:27+05:00</updated>
    <id>http://d0k1.github.io/focusit/blog/2017/01/04/jcmd</id>
    <content type="html"><![CDATA[<p>Sometimes, as you probably know, there could be a situation when you would want to send some commands to a running JVM instance to get an idea what&rsquo;s heppening in the VM.
For example you might want to send a command to make a heap dump, print class histogram or something else.
This is the case for jcmd utility. It can send a lot of diagnostic commands to a JVM throught a special diagnostic channel.
And the only condition for it to be possible is that JVM should be running normally, it must not be freezed.
For example when JVM makes a heap dump it can&rsquo;t accept any diagnostic commands.</p>

<!-- more -->


<p>So, using jcmd is as simply as</p>

<pre><code>    jcmd PID &lt;command&gt;
</code></pre>

<p>jcmd can print a list of supported commands.
<code>
jcmd PID help
</code></p>

<p>This post will cover commands:</p>

<ul>
<li>JFR.stop</li>
<li>JFR.start</li>
<li>JFR.dump</li>
<li>GC.class_stats</li>
<li>GC.class_histogram</li>
<li>GC.heap_dump</li>
<li>GC.run_finalization</li>
<li>GC.run</li>
<li>VM.native_memory</li>
<li>VM.uptime</li>
<li>VM.flags</li>
<li>VM.system_properties</li>
<li>VM.command_line</li>
<li>VM.version</li>
</ul>


<h1>Java Flight Recorder commands</h1>

<p>There some commands that can control jfr recording.</p>

<ul>
<li>JFR.stop - stops current recording</li>
<li>JFR.start - starts a recording</li>
<li>JFR.dump - save current recording to a file</li>
</ul>


<h1>GC commands</h1>

<p>jcmd can help with memory issues by using these commands</p>

<ul>
<li>GC.class_stats - prints statistics about loaded classes: how many methods, annotations, bytecode, etc every loaded class has</li>
<li>GC.class_histogram - prints histogram that shows how many objects are live in heap of every loaded class</li>
<li>GC.heap_dump - makes a heap dump</li>
<li>GC.run_finalization - runs finalization phase of GC</li>
<li>GC.run - runs FullGC</li>
</ul>


<h1>VM commands</h1>

<p>Finally, there are some informational commands jcmd can send.</p>

<ul>
<li>VM.native_memory - shows infomation about native memory usage</li>
<li>VM.uptime - shows JVM uptime</li>
<li>VM.flags - shows flags that were used to launch JVM</li>
<li>VM.system_properties - shows all system properties that are accessable within JVM</li>
<li>VM.command_line - shows full command line that was used to launch JVM</li>
<li>VM.version - shows JVM&rsquo;s version</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JPS]]></title>
    <link href="http://d0k1.github.io/focusit/blog/2016/12/31/jps/"/>
    <updated>2016-12-31T01:11:15+05:00</updated>
    <id>http://d0k1.github.io/focusit/blog/2016/12/31/jps</id>
    <content type="html"><![CDATA[<p>This small tool can be useful when someone wants to view PIDs of running JVMs on the host.</p>

<h1>List of JVM instances</h1>

<p>Just type <code>jps</code> and you&rsquo;ll see running JVMs instances.</p>

<pre><code>$ jps
17910 Jps
17884 org.eclipse.equinox.launcher_1.3.100.v20150511-1540.jar
</code></pre>

<p>But jps can do more.</p>

<!-- more -->


<h1>List of JVM arguments</h1>

<p><code>jps -v</code> will show command line arguments used to start a specific JVM instance
<code>
jps -v               
18313 Jps -Dapplication.home=/usr/lib/jvm/java-8-oracle -Xms8m
</code></p>

<h1>Main class used to launch JVM</h1>

<p><code>jps -l</code> will tell you what class was used as main to start a java application</p>

<pre><code>$ jps -l
19143 sun.tools.jps.Jps
</code></pre>

<p>Next post will describe jcmd. Tool that can control running jvm instance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Power Tools]]></title>
    <link href="http://d0k1.github.io/focusit/blog/2016/12/05/java-power-tools/"/>
    <updated>2016-12-05T23:34:07+05:00</updated>
    <id>http://d0k1.github.io/focusit/blog/2016/12/05/java-power-tools</id>
    <content type="html"><![CDATA[<p>Hi there!
In this short post serie I&rsquo;m going to tell you a bit about some use cases of &ldquo;invisible&rdquo; tools that JDK comes with.
I had wondered of fact that many developers don&rsquo;t know anything about invisible power of these jdk tools.
All of these tools aimed to help understanding what is going on in running jvm.</p>

<p>List of invisible tools:</p>

<ul>
<li>jps</li>
<li>jcmd</li>
<li>jstat</li>
<li>jstack</li>
<li>jmap</li>
<li>jhat</li>
</ul>


<p>I will write about one tool at a time.</p>

<p>Next post dedicated to jps.</p>
]]></content>
  </entry>
  
</feed>
