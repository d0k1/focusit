<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[FocusIt - Make IT happens]]></title>
  <link href="http://d0k1.github.io/focusit/atom.xml" rel="self"/>
  <link href="http://d0k1.github.io/focusit/"/>
  <updated>2017-01-20T23:59:44+05:00</updated>
  <id>http://d0k1.github.io/focusit/</id>
  <author>
    <name><![CDATA[Denis Kirpichenkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Free Books]]></title>
    <link href="http://d0k1.github.io/focusit/blog/2017/01/10/free-books/"/>
    <updated>2017-01-10T00:47:51+05:00</updated>
    <id>http://d0k1.github.io/focusit/blog/2017/01/10/free-books</id>
    <content type="html"><![CDATA[<p>Recently I realized that github has become for me something, where I can spend hours. It become something what facebook or twitter is for normal people.
So, I decided to share some intresting repos to save someone&rsquo;s time.
This is incredibly short post. I&rsquo;ll just provide you a repositry where you can borrow something new in computer science/IT/software development.</p>

<p>Just open link and you&rsquo;ll see what value it has. I hope :)</p>

<p><a href="https://github.com/vhf/free-programming-books">Free programming books</a></p>

<p>This repository gives you a list of free books on programming in many languages. So, you are very welcome to read and push your skills high.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jstat]]></title>
    <link href="http://d0k1.github.io/focusit/blog/2017/01/06/jstat/"/>
    <updated>2017-01-06T15:25:53+05:00</updated>
    <id>http://d0k1.github.io/focusit/blog/2017/01/06/jstat</id>
    <content type="html"><![CDATA[<p>Sometime ago I&rsquo;ve realized that JVM has two major things, that affects JVM performance the most.
It is Jist-In-Time compilation and, of course, Garbage Collection.
I believe that <code>jstat</code> is a great tool that show what&rsquo;s JIT/GC doing right now, and some statistics about JIT/GC activity.</p>

<!-- more -->


<p>Let&rsquo;s go to the bussiness.</p>

<p>To start jstat run</p>

<p><code>
jstat operation option PID interval count
</code></p>

<ul>
<li>operation is a jstat&rsquo;s &lsquo;mode&rsquo;. It can monitor compiler, gc, classes. To get full list of supported operations run <code>jstat -options</code></li>
<li>option can beutify in some sense jstat output. <code>jstat -t</code> will print timestamp for every line. Timestamp is a time in seconds elapsed from JVM&rsquo;s start. <code>jstat -h 3</code> will print header every 3 lines of jstat&rsquo;s output.</li>
<li>PID is a JVM&rsquo;s process id. Actually, as PID you can provide a vmid that is running on remote server. Example <code>jstat -gccause 123@remote-server.rsi</code></li>
<li>interval is a time between jstat measurements. It can be in ms or s. Example <code>jstat -compiler 4795 1s</code></li>
<li>count is a number of jstat measurements</li>
</ul>


<p>As for me I prefer to use -gccause -compiler modes when using jstat.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jstat -compiler -t -h 3 4795 1s                                                                                                                                             130 ↵
</span><span class='line'>Timestamp       Compiled Failed Invalid   Time   FailedType FailedMethod
</span><span class='line'>        33819.6     1270      1       0     4.61          1 sun/misc/URLClassPath$JarLoader getResource
</span><span class='line'>        33820.6     1270      1       0     4.61          1 sun/misc/URLClassPath$JarLoader getResource
</span><span class='line'>        33821.6     1270      1       0     4.61          1 sun/misc/URLClassPath$JarLoader getResource
</span><span class='line'>
</span><span class='line'>$ jstat -gccause -t -h 3 4795 1s                                                                                                                                              130 ↵
</span><span class='line'>Timestamp         S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC                 
</span><span class='line'>        33984.8  78.01   0.00  11.38   0.10  97.16  95.01      2    0.099     0    0.000    0.099 Allocation Failure   No GC               
</span><span class='line'>        33985.9  78.01   0.00  11.38   0.10  97.16  95.01      2    0.099     0    0.000    0.099 Allocation Failure   No GC               
</span><span class='line'>        33986.9  78.01   0.00  11.38   0.10  97.16  95.01      2    0.099     0    0.000    0.099 Allocation Failure   No GC               
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jcmd]]></title>
    <link href="http://d0k1.github.io/focusit/blog/2017/01/04/jcmd/"/>
    <updated>2017-01-04T01:32:27+05:00</updated>
    <id>http://d0k1.github.io/focusit/blog/2017/01/04/jcmd</id>
    <content type="html"><![CDATA[<p>Sometimes, as you probably know, there could be a situation when you would want to send some commands to a running JVM instance to get an idea what&rsquo;s heppening in the VM.
For example you might want to send a command to make a heap dump, print class histogram or something else.
This is the case for jcmd utility. It can send a lot of diagnostic commands to a JVM throught a special diagnostic channel.
And the only condition for it to be possible is that JVM should be running normally, it must not be freezed.
For example when JVM makes a heap dump it can&rsquo;t accept any diagnostic commands.</p>

<!-- more -->


<p>So, using jcmd is as simply as</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jcmd PID &lt;command&gt;</span></code></pre></td></tr></table></div></figure>


<p>jcmd can print a list of supported commands.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jcmd PID help</span></code></pre></td></tr></table></div></figure>


<p>This post will cover commands:</p>

<ul>
<li>JFR.stop</li>
<li>JFR.start</li>
<li>JFR.dump</li>
<li>GC.class_stats</li>
<li>GC.class_histogram</li>
<li>GC.heap_dump</li>
<li>GC.run_finalization</li>
<li>GC.run</li>
<li>VM.native_memory</li>
<li>VM.uptime</li>
<li>VM.flags</li>
<li>VM.system_properties</li>
<li>VM.command_line</li>
<li>VM.version</li>
</ul>


<h1>Java Flight Recorder commands</h1>

<p>There some commands that can control jfr recording.</p>

<ul>
<li>JFR.stop - stops current recording</li>
<li>JFR.start - starts a recording</li>
<li>JFR.dump - save current recording to a file</li>
</ul>


<h1>GC commands</h1>

<p>jcmd can help with memory issues by using these commands</p>

<ul>
<li>GC.class_stats - prints statistics about loaded classes: how many methods, annotations, bytecode, etc every loaded class has</li>
<li>GC.class_histogram - prints histogram that shows how many objects are live in heap of every loaded class</li>
<li>GC.heap_dump - makes a heap dump</li>
<li>GC.run_finalization - runs finalization phase of GC</li>
<li>GC.run - runs FullGC</li>
</ul>


<h1>VM commands</h1>

<p>Finally, there are some informational commands jcmd can send.</p>

<ul>
<li>VM.native_memory - shows infomation about native memory usage</li>
<li>VM.uptime - shows JVM uptime</li>
<li>VM.flags - shows flags that were used to launch JVM</li>
<li>VM.system_properties - shows all system properties that are accessable within JVM</li>
<li>VM.command_line - shows full command line that was used to launch JVM</li>
<li>VM.version - shows JVM&rsquo;s version</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JPS]]></title>
    <link href="http://d0k1.github.io/focusit/blog/2016/12/31/jps/"/>
    <updated>2016-12-31T01:11:15+05:00</updated>
    <id>http://d0k1.github.io/focusit/blog/2016/12/31/jps</id>
    <content type="html"><![CDATA[<p>This small tool can be useful when someone wants to view PIDs of running JVMs on the host.</p>

<h1>List of JVM instances</h1>

<p>Just type <code>jps</code> and you&rsquo;ll see running JVMs instances.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jps
</span><span class='line'>17910 Jps
</span><span class='line'>17884 org.eclipse.equinox.launcher_1.3.100.v20150511-1540.jar</span></code></pre></td></tr></table></div></figure>


<p>But jps can do more.</p>

<!-- more -->


<h1>List of JVM arguments</h1>

<p><code>jps -v</code> will show command line arguments used to start a specific JVM instance</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jps -v               
</span><span class='line'>18313 Jps -Dapplication.home=/usr/lib/jvm/java-8-oracle -Xms8m</span></code></pre></td></tr></table></div></figure>


<h1>Main class used to launch JVM</h1>

<p><code>jps -l</code> will tell you what class was used as main to start a java application</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jps -l
</span><span class='line'>19143 sun.tools.jps.Jps</span></code></pre></td></tr></table></div></figure>


<p>Next post will describe jcmd. Tool that can control running jvm instance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Power Tools]]></title>
    <link href="http://d0k1.github.io/focusit/blog/2016/12/05/java-power-tools/"/>
    <updated>2016-12-05T23:34:07+05:00</updated>
    <id>http://d0k1.github.io/focusit/blog/2016/12/05/java-power-tools</id>
    <content type="html"><![CDATA[<p>Hi there!
In this short post serie I&rsquo;m going to tell you a bit about some use cases of &ldquo;invisible&rdquo; tools that JDK comes with.
I had wondered of fact that many developers don&rsquo;t know anything about invisible power of these jdk tools.
All of these tools aimed to help understanding what is going on in running jvm.</p>

<p>List of invisible tools:</p>

<ul>
<li>jps</li>
<li>jcmd</li>
<li>jstat</li>
<li>jstack</li>
<li>jmap</li>
<li>jhat</li>
</ul>


<p>I will write about one tool at a time.</p>

<p>Next post dedicated to jps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Cheat Sheet]]></title>
    <link href="http://d0k1.github.io/focusit/blog/2016/12/04/octopress-cheat-sheet/"/>
    <updated>2016-12-04T22:08:29+05:00</updated>
    <id>http://d0k1.github.io/focusit/blog/2016/12/04/octopress-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Octopress posting workflow:</p>

<ol>
<li><code>rake new_post["Post title"]</code>. Note, if you are <em>zsh</em> user don&rsquo;t forget to escape <code>[</code> and <code>]</code></li>
<li><code>rake generate</code></li>
<li><code>git add .</code></li>
<li><code>git commit -am 'Post title'</code></li>
<li><code>git push origin source</code></li>
<li><code>rake deploy</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nice to Meet You!]]></title>
    <link href="http://d0k1.github.io/focusit/blog/2016/12/04/nice-to-meet-you/"/>
    <updated>2016-12-04T16:44:15+05:00</updated>
    <id>http://d0k1.github.io/focusit/blog/2016/12/04/nice-to-meet-you</id>
    <content type="html"><![CDATA[<p>Hello, and Welcome.
My name is Denis Kirpichenkov, and I&rsquo;m a Java developer who likes DevOps too ;)
In my first post will tell you how to get very powerful Content Management System, and how to get free hosting for it.</p>

<p>I tried many times to start blogging, but again and again I failed. The one of reasons was CMS. I could find content system to fit all of my needs.
But now, I hope I found The One. I&rsquo;m talking about Octopress. It is a powerful and simple Content Management System, which is for say is not a CMS at all.
I&rsquo;m will briefly describe its features in this post.</p>

<p>The next important step in blogging is a hosting. I tried Amazon&rsquo;s EC2 tiny instance, Digital Ocean&rsquo;s 5-dollars-per-month-vm.
They didn&rsquo;t fit my needs as well. I had to maintain them, and this process takes time. It is a big problem for me.
I found the best hosting I&rsquo;ve ever dreamt - GitHub.
Below I will tell how to make GitHub to host your blog for FREE.</p>

<!-- more -->


<h1>Octopress basic</h1>

<p>Octopress is not a CMS in common sense. It is a bunch of ruby scripts that generates static html pages to host your posts. So, your blog will be blazing fast.
You have some customization point such as themes, page templates. I promise I&rsquo;ll write about it after I&rsquo;ll try it on this blog.
I read about Octopress somewhere, google it, and thought that it is woth trying.</p>

<h2>Installation</h2>

<p>First of all, you have to get it from github</p>

<p><code>git clone git://github.com/imathis/octopress.git octopress</code></p>

<p>Next, make initial preparations</p>

<p><code>cd octopress &amp;&amp; bundle install</code></p>

<p>After it you need to run</p>

<p><code>rake install</code></p>

<p><strong>Ubuntu 16.04</strong> I don&rsquo;t know why at the moment, but if you run <code>rake SOMETHING</code> you&rsquo;ll get wierd error, that tells nothing.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundler: failed to load command: rake (/usr/local/bin/rake)
</span><span class='line'>LoadError: cannot load such file -- /usr/share/rubygems-integration/all/specifications/bin/rake
</span><span class='line'>  /usr/local/bin/rake:23:in `load'
</span><span class='line'>  /usr/local/bin/rake:23:in `&lt;top (required)&gt;'</span></code></pre></td></tr></table></div></figure>


<p>The quick solution is to use <code>/usr/bin/rake</code> instead of <code>rake</code></p>

<h2>Taste it</h2>

<p>After you&rsquo;ve done Octopress installation, you can test it. Just run <code>rake preview</code> and open browser at <code>localhost:4000</code></p>

<h2>First post</h2>

<p>Making post is as easy as run <code>rake new_post["This is a fisrt post"]</code> It will create a markdown file in  <code>source/_posts</code></p>

<p>You are free to write whatever you want in this post in markdown.
To make it a bit easier here is <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">markdown cheat sheet</a></p>

<h2>Generate pages</h2>

<p>When you are ready to publish your blog you have to run <code>rake generate</code>. This command will produce everything you need to serve blog in <code>public</code> folder
So, after generation you are free to upload public to whatever you want hosting, and have your blog online.</p>

<h1>GitHub as a free hosting</h1>

<p>After you&rsquo;ve cloned a Octopress repo from github you can use it as your own repo for blog. First you need to run <code>rake setup_github_pages</code>.
This command will ask you about url to your github repository to work with</p>

<p><code>
Enter the read/write url for your repository
</code></p>

<p>You may answer something like this <code>git@github.com:USERNAME/REPOSITORY.git</code>
Don&rsquo;t forget to change USERNAME to your github&rsquo;s login, and REPOSITORY to your repository name</p>

<p>Next, add your remote repo to your local repo by running <code>git remote add origin git@github.com:USERNAME/REPOSITORY.git</code></p>

<p>The next step is renaming current branch from &lsquo;master&rsquo; to &lsquo;source&rsquo; with <code>git branch -m master source</code></p>

<p>After that, generate everything with <code>rake generate</code></p>

<p>Add the whole directory with Octopress and your post to a git with <code>git add .</code></p>

<p>Make commit <code>git commit -am "First commit to github."</code></p>

<p>Push it to github <code>git push origin source</code></p>

<p>Deploy generated content to GitHub <code>rake deploy</code></p>

<h2>Subdirectory problem</h2>

<p>If you github repo is something like <code>d0k1/focusit</code> you&rsquo;ll face a problem - deployed blog would not find resources like static content (css, images).
To solve this you need to run <code>rake set_root_dir[d0k1/focusit]</code>
To revert changes run <code>rake set_root_dir[/]</code></p>

<p>After you done it, update <code>_config.yml</code>
<code>
url: http://d0k1.github.io/focusit
</code></p>

<p>and <code>Rakefile</code>
<code>
document_root = "~/d0k1.github.io/focusit"
</code></p>

<h2>Custom Domain</h2>

<p>You can add custom domain to you github pages based blog. To make it you need to create two file inside <code>source</code> catalog: <code>CNAME</code>, <code>.nojekyll</code>
File <code>CNAME</code> should contain you custom domain, for example <code>focus-it.ru</code></p>

<p>After it you can ypddate you repository</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>git add .
</span><span class='line'>git add -am 'domain configuration'
</span><span class='line'>git push origin source
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>Do not forget to update your DNS to forward requests from you custom domain to github&rsquo;s servers.
You need know what ip servers you repostiry</p>

<p>After I ran
<code>dig d0k1.github.io +nostats +nocomments +nocmd</code></p>

<p>I got</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; d0k1.github.io +nostats +nocomments +nocmd
</span><span class='line'>;; global options: +cmd
</span><span class='line'>;d0k1.github.io.            IN    A
</span><span class='line'>d0k1.github.io.        3599    IN    CNAME    github.map.fastly.net.
</span><span class='line'>github.map.fastly.net.    29    IN    A    151.101.12.133</span></code></pre></td></tr></table></div></figure>


<p>Now I know IP of server that process request to my repository (d0k1.github.io) -  151.101.12.133
And now I have to add to DNS
<code>@    A    151.101.36.133</code></p>

<p>So, that&rsquo;s how I get my blog on focus-it.ru up and running on free hosting with a great &ldquo;CMS&rdquo;</p>

<p>&ndash;
<em>Cheers,</em></p>
]]></content>
  </entry>
  
</feed>
